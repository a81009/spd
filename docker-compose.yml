version: '3.8'

# ---------- VARI√ÅVEIS COMUNS ----------
x-common-env: &common-env
  # Redis configura√ß√£o com Sentinel
  REDIS_SENTINEL_HOST: sentinel1,sentinel2,sentinel3
  REDIS_SENTINEL_PORT: 26379
  REDIS_MASTER_NAME: mymaster
  # Configura√ß√µes antigas do Redis mantidas para compatibilidade
  REDIS_HOST: redis-master
  REDIS_PORT: 6379
  # Outras configura√ß√µes
  MQ_HOST: rabbitmq
  MQ_PORT: 5672
  STORAGE_BACKEND: cockroach
  COCKROACH_DSN: postgresql://root@cockroach-lb:26257/kvdb?sslmode=disable
  # Configura√ß√µes de limite para o Redis
  MAX_CACHE_KEYS: 10000  # Limite de 10.000 chaves
  MAX_CACHE_MEMORY_MB: 100  # Limite de 100MB de mem√≥ria

services:
  # ---------- DATA LAYER ----------
  cockroach1:
    image: cockroachdb/cockroach:v23.2.4
    command: >
      start
      --insecure
      --join=cockroach1,cockroach2,cockroach3
      --listen-addr=:26257
      --http-addr=:8080
      --locality=node=1
    hostname: cockroach1
    volumes:
      - cockroach-data1:/cockroach/cockroach-data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  cockroach2:
    image: cockroachdb/cockroach:v23.2.4
    command: >
      start
      --insecure
      --join=cockroach1,cockroach2,cockroach3
      --listen-addr=:26257
      --http-addr=:8080
      --locality=node=2
    hostname: cockroach2
    volumes:
      - cockroach-data2:/cockroach/cockroach-data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      - cockroach1

  cockroach3:
    image: cockroachdb/cockroach:v23.2.4
    command: >
      start
      --insecure
      --join=cockroach1,cockroach2,cockroach3
      --listen-addr=:26257
      --http-addr=:8080
      --locality=node=3
    hostname: cockroach3
    volumes:
      - cockroach-data3:/cockroach/cockroach-data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      - cockroach1

  # Load balancer para o CockroachDB
  cockroach-lb:
    image: nginx:1.27-alpine
    volumes:
      - ./nginx/cockroach-lb.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - cockroach1
      - cockroach2
      - cockroach3
    restart: unless-stopped

  cockroach-init:
    image: cockroachdb/cockroach:v23.2.4
    depends_on:
      cockroach1:
        condition: service_healthy
    entrypoint: >
      sh -c "
        echo '‚è≥ √Ä espera do Cockroach‚Ä¶';
        until cockroach sql --host=cockroach1 --insecure -e 'SELECT 1' >/dev/null 2>&1; do
          sleep 1;
        done;
        echo '‚úÖ Iniciando cluster‚Ä¶';
        cockroach init --host=cockroach1 --insecure;
        echo '‚úÖ Criando BD kvdb‚Ä¶';
        cockroach sql --host=cockroach1 --insecure -e \"CREATE DATABASE IF NOT EXISTS kvdb;\";
        echo '‚úÖ Criando tabela kv_store‚Ä¶';
        cockroach sql --host=cockroach1 --insecure -e \"CREATE TABLE IF NOT EXISTS kvdb.kv_store ( key STRING PRIMARY KEY, value STRING );\";
        echo 'üèÅ pronto.'
      "
    restart: "no"

  # Redis Cluster (1 master, 2 slaves, 3 sentinels)
  redis-master:
    image: redis:7
    command: redis-server --maxmemory ${MAX_CACHE_MEMORY_MB:-100}mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-master-data:/data
    restart: unless-stopped
    environment:
      MAXMEMORY: "${MAX_CACHE_MEMORY_MB:-100}mb"
      MAXMEMORY_POLICY: "allkeys-lru"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3

  redis-slave1:
    image: redis:7
    command: redis-server --slaveof redis-master 6379 --maxmemory ${MAX_CACHE_MEMORY_MB:-100}mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-slave1-data:/data
    depends_on:
      - redis-master
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3

  redis-slave2:
    image: redis:7
    command: redis-server --slaveof redis-master 6379 --maxmemory ${MAX_CACHE_MEMORY_MB:-100}mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-slave2-data:/data
    depends_on:
      - redis-master
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3

  sentinel1:
    image: redis:7
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    restart: unless-stopped

  sentinel2:
    image: redis:7
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    restart: unless-stopped

  sentinel3:
    image: redis:7
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "25672:5672"  # Porta alta para evitar restri√ß√µes de acesso
      - "25673:15672" # Porta alta para interface web
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  # ---------- APPLICATION LAYER ----------
  api:
    build: .
    depends_on:
      cockroach-init:
        condition: service_completed_successfully
      redis-master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      <<: *common-env
      SERVICE_NAME: api-${HOSTNAME:-unknown}
      SERVICE_PORT: 8000
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2 # Inicia com 2 para HA
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    expose: ["8000"]
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  consumer:
    build: ./consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      cockroach-init:
        condition: service_completed_successfully
      redis-master:
        condition: service_healthy
    environment:
      <<: *common-env
      METRICS_PORT: "9092"
      HEALTH_PORT: "8080"
      SERVICE_NAME: consumer-${HOSTNAME:-unknown}
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2 # Inicia com 2 para HA
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.10'
          memory: 64M
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ---------- MONITORING ----------
  prometheus:
    image: prom/prometheus:v2.51.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9091:9090"
    depends_on:
      - api
      - consumer
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.0
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped

  # Auto-scaler service
  autoscaler:
    build:
      context: ./autoscaler
      dockerfile: Dockerfile
    depends_on:
      - prometheus
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - API_REPLICAS_MIN=2
      - API_REPLICAS_MAX=10
      - API_CPU_HIGH_THRESHOLD=70
      - API_CPU_LOW_THRESHOLD=30
      - API_MEMORY_HIGH_THRESHOLD=80
      - API_MEMORY_LOW_THRESHOLD=40
      - CONSUMER_REPLICAS_MIN=2
      - CONSUMER_REPLICAS_MAX=8
      - CONSUMER_CPU_HIGH_THRESHOLD=70
      - CONSUMER_CPU_LOW_THRESHOLD=30
      - CONSUMER_MEMORY_HIGH_THRESHOLD=80
      - CONSUMER_MEMORY_LOW_THRESHOLD=40
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SCALING_INTERVAL=30  # segundos entre verifica√ß√µes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  # ---------- EDGE ----------
  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports: ["80:80"]
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  cockroach-data1:
  cockroach-data2:
  cockroach-data3:
  grafana-data:
  redis-master-data:
  redis-slave1-data:
  redis-slave2-data:
