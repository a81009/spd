version: '3.8'

# ---------- VARI√ÅVEIS COMUNS ----------
x-common-env: &common-env
  REDIS_HOST: redis
  REDIS_PORT: 6379
  MQ_HOST: rabbitmq
  MQ_PORT: 5672
  STORAGE_BACKEND: cockroach
  COCKROACH_DSN: postgresql://root@cockroach1:26257/kvdb?sslmode=disable

services:
  # ---------- DATA LAYER ----------
  cockroach1:
    image: cockroachdb/cockroach:v23.2.4
    command: >
      start-single-node
      --insecure
      --listen-addr=:26257
      --http-addr=:8080
    hostname: cockroach1
    volumes:
      - cockroach-data:/cockroach/cockroach-data
    ports:
      - "26257:26257"
      - "8080:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  cockroach-init:
    image: cockroachdb/cockroach:v23.2.4
    depends_on:
      cockroach1:
        condition: service_healthy
    entrypoint: >
      sh -c "
        echo '‚è≥ √Ä espera do Cockroach‚Ä¶';
        until cockroach sql --host=cockroach1 --insecure -e 'SELECT 1' >/dev/null 2>&1; do
          sleep 1;
        done;
        echo '‚úÖ Criando BD kvdb‚Ä¶';
        cockroach sql --host=cockroach1 --insecure -e \"CREATE DATABASE IF NOT EXISTS kvdb;\";
        echo '‚úÖ Criando tabela kv_store‚Ä¶';
        cockroach sql --host=cockroach1 --insecure -e \"CREATE TABLE IF NOT EXISTS kvdb.kv_store ( key STRING PRIMARY KEY, value STRING );\";
        echo 'üèÅ pronto.'
      "
    restart: "no"

  redis:
    image: redis:7
    ports: ["6379:6379"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  # ---------- APPLICATION LAYER ----------
  api:
    build: .
    depends_on:
      cockroach-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      <<: *common-env
    restart: unless-stopped
    expose: ["8000"]
    ports:
      - "8000:8000"  # Para m√©tricas Prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      replicas: 2  # Inicia duas inst√¢ncias para HA

  consumer:
    build: ./consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      cockroach-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      <<: *common-env
      METRICS_PORT: "9090"
      HEALTH_PORT: "8080"
    restart: unless-stopped
    ports:
      - "9090:9090"  # Para m√©tricas Prometheus
      - "8081:8080"  # Para health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      replicas: 2  # Inicia duas inst√¢ncias para processamento paralelo

  # ---------- MONITORING ----------
  prometheus:
    image: prom/prometheus:v2.51.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9091:9090"
    depends_on:
      - api
      - consumer
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.0
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

  # ---------- EDGE ----------
  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports: ["80:80"]
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  cockroach-data:
  grafana-data:
