#!/bin/bash
set -euo pipefail

echo "üî• Iniciando testes de carga com Siege üî•"

# Verificar se o Siege est√° instalado
if ! command -v siege &> /dev/null; then
    echo "‚ùå Siege n√£o est√° instalado. Por favor, instale o Siege primeiro."
    echo "üëâ Para instalar no Ubuntu/Debian: sudo apt-get install siege"
    echo "üëâ Para instalar no CentOS/RHEL: sudo yum install siege"
    echo "üëâ Para instalar no Windows: utilize o WSL (Windows Subsystem for Linux)"
    exit 1
fi

# URL base da API
API_URL="http://localhost"
# N√∫mero de chaves para teste
NUM_KEYS=100
# N√∫mero de usu√°rios concorrentes
USERS=25
# Dura√ß√£o dos testes
DURATION="1M"

# Prepara√ß√£o dos arquivos de URLs para cada opera√ß√£o
PUT_URLS_FILE="put_urls.txt"
GET_URLS_FILE="get_urls.txt"
DELETE_URLS_FILE="delete_urls.txt"

# Criar diret√≥rio tempor√°rio para arquivos de dados
TEMP_DIR="siege_temp"
mkdir -p "$TEMP_DIR"

# Criar arquivo com URLs para testes de PUT
create_put_urls_file() {
    local filename=$1
    echo "Criando arquivo de URLs para opera√ß√£o PUT..."
    
    # Limpa o arquivo se j√° existir
    > "$filename"
    
    # Adiciona URLs de PUT com valores diferentes usando arquivos de dados
    for i in $(seq 1 $NUM_KEYS); do
        # Criar um arquivo de dados JSON separado para cada chave
        local data_file="$TEMP_DIR/put_data_$i.json"
        echo "{\"data\":{\"key\":\"test_key_$i\",\"value\":\"test_value_$i\"}}" > "$data_file"
        
        # Formato correto para o Siege: URL POST <arquivo_de_dados
        echo "$API_URL/kv POST <$data_file" >> "$filename"
    done
    
    echo "‚úÖ Arquivo de URLs para PUT criado: $filename"
}

# Criar arquivo com URLs para testes de GET
create_get_urls_file() {
    local filename=$1
    echo "Criando arquivo de URLs para opera√ß√£o GET..."
    
    # Limpa o arquivo se j√° existir
    > "$filename"
    
    # Adiciona URLs de GET com chaves diferentes
    for i in $(seq 1 $NUM_KEYS); do
        echo "$API_URL/kv?key=test_key_$i" >> "$filename"
    done
    
    echo "‚úÖ Arquivo de URLs para GET criado: $filename"
}

# Criar arquivo com URLs para testes de DELETE
create_delete_urls_file() {
    local filename=$1
    echo "Criando arquivo de URLs para opera√ß√£o DELETE..."
    
    # Limpa o arquivo se j√° existir
    > "$filename"
    
    # Adiciona URLs de DELETE com chaves diferentes
    for i in $(seq 1 $NUM_KEYS); do
        echo "$API_URL/kv?key=test_key_$i DELETE" >> "$filename"
    done
    
    echo "‚úÖ Arquivo de URLs para DELETE criado: $filename"
}

# Teste de carga para opera√ß√£o PUT
run_put_test() {
    local urls_file=$1
    local concurrent_users=$2
    local test_time=$3
    
    echo -e "\nüìä TESTE DE CARGA: OPERA√á√ÉO PUT (Cria√ß√£o/Atualiza√ß√£o de chaves)"
    echo "üîÑ Executando teste com $concurrent_users usu√°rios concorrentes por $test_time..."
    siege --content-type="application/json" -f "$urls_file" -c "$concurrent_users" -t "$test_time" -v
}

# Teste de carga para opera√ß√£o GET
run_get_test() {
    local urls_file=$1
    local concurrent_users=$2
    local test_time=$3
    
    echo -e "\nüìä TESTE DE CARGA: OPERA√á√ÉO GET (Leitura de chaves)"
    echo "üîÑ Executando teste com $concurrent_users usu√°rios concorrentes por $test_time..."
    siege -f "$urls_file" -c "$concurrent_users" -t "$test_time" -v
}

# Teste de carga para opera√ß√£o DELETE
run_delete_test() {
    local urls_file=$1
    local concurrent_users=$2
    local test_time=$3
    
    echo -e "\nüìä TESTE DE CARGA: OPERA√á√ÉO DELETE (Remo√ß√£o de chaves)"
    echo "üîÑ Executando teste com $concurrent_users usu√°rios concorrentes por $test_time..."
    siege -f "$urls_file" -c "$concurrent_users" -t "$test_time" -v
}

# An√°lise do resultado
show_result_explanation() {
    echo -e "\nüìã O que os resultados significam:"
    echo "- Transactions: N√∫mero total de requisi√ß√µes processadas"
    echo "- Availability: Porcentagem de requisi√ß√µes bem-sucedidas"
    echo "- Elapsed time: Tempo total do teste"
    echo "- Data transferred: Quantidade de dados transferidos"
    echo "- Response time: Tempo m√©dio de resposta por requisi√ß√£o"
    echo "- Transaction rate: N√∫mero de transa√ß√µes por segundo"
    echo "- Throughput: Quantidade de dados transferidos por segundo"
    echo "- Concurrency: N√∫mero m√©dio de conex√µes simult√¢neas"
    echo "- Successful transactions: N√∫mero de transa√ß√µes bem-sucedidas"
    echo "- Failed transactions: N√∫mero de transa√ß√µes com falha"
}

# Fun√ß√£o principal de teste
run_tests() {
    local test_type=$1
    
    case $test_type in
        "put")
            create_put_urls_file "$PUT_URLS_FILE"
            run_put_test "$PUT_URLS_FILE" $USERS $DURATION
            ;;
        "get")
            # Pr√©-popular as chaves antes de testar GET
            echo -e "\nüîÑ Pr√©-populando chaves antes do teste GET..."
            create_put_urls_file "$PUT_URLS_FILE"
            siege --content-type="application/json" -f "$PUT_URLS_FILE" -c 10 -r 1 -q
            sleep 5  # Espera um pouco para garantir que as chaves foram processadas
            
            create_get_urls_file "$GET_URLS_FILE"
            run_get_test "$GET_URLS_FILE" $USERS $DURATION
            ;;
        "delete")
            # Pr√©-popular as chaves antes de testar DELETE
            echo -e "\nüîÑ Pr√©-populando chaves antes do teste DELETE..."
            create_put_urls_file "$PUT_URLS_FILE"
            siege --content-type="application/json" -f "$PUT_URLS_FILE" -c 10 -r 1 -q
            sleep 5  # Espera um pouco para garantir que as chaves foram processadas
            
            create_delete_urls_file "$DELETE_URLS_FILE"
            run_delete_test "$DELETE_URLS_FILE" $USERS $DURATION
            ;;
        "all")
            # Executar todos os testes em sequ√™ncia
            run_tests "put"
            run_tests "get"
            run_tests "delete"
            ;;
        *)
            echo "‚ùå Tipo de teste inv√°lido: $test_type"
            echo "Op√ß√µes v√°lidas: put, get, delete, all"
            exit 1
            ;;
    esac
}

# Mensagem de in√≠cio
echo -e "\n‚öôÔ∏è Configura√ß√µes do teste de carga:"
echo "- N√∫mero de chaves: $NUM_KEYS"
echo "- Usu√°rios concorrentes: $USERS"
echo "- Dura√ß√£o do teste: $DURATION"

# Se n√£o houver argumento, executa apenas o teste PUT
TEST_TYPE=${1:-"put"}
run_tests "$TEST_TYPE"

# Mostrar explica√ß√£o dos resultados
show_result_explanation

# Limpar arquivos tempor√°rios
rm -f "$PUT_URLS_FILE" "$GET_URLS_FILE" "$DELETE_URLS_FILE"
rm -rf "$TEMP_DIR"

echo -e "\nüèÅ Testes de carga conclu√≠dos!" 